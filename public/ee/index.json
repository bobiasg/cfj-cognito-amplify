[
{
	"uri": "//localhost:1313/ee/",
	"title": "AWS Modernization Workshop Base Template",
	"tags": [],
	"description": "",
	"content": "AWS Modernization Workshop Base Template Welcome REMOVE: By utilizing this template, you can create your workshops with little coding knowledge. These workshops use the Hugo Framework and the hugo-theme-learn submodules. By writing content using simple markdown code, Hugo creates the necessary HTML for you. Examples of code, files, and folders here can be modified, copied, pasted, and deleted as necessary. Block sections of instruction that should be removed will be explicitly marked with REMOVE. Other sections should be modified to reflect the workshop. For guidance on how to utilize the Hugo framework and markdown, please refer to the module titled \u0026ldquo;Hugo Framework And Markdown\u0026rdquo;. That module can be removed once building the workshop is complete.\nThis paragraph block can give the high level overview of the learning goals and use cases of what the workshop is trying to teach.\nThis paragraph block can be used to introduce the company and how the solution being taught addresses specific issues.\nREMOVE: Every introduction page should include the following warning label.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\n"
},
{
	"uri": "//localhost:1313/ee/1_moduleone.html",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction What you\u0026rsquo;ll be building Implementing Authentication in a Next.js 14 Application with AWS Cognito and NextAuth Integration\nWhen building a Next.js 14 application, implementing robust authentication is crucial for securing user data and managing access to various parts of your application. By integrating AWS Cognito with the NextAuth library, you can create a seamless sign-in/sign-up experience that leverages AWS\u0026rsquo;s secure and scalable user authentication service.\nIn this workshop, we’ll walk through how to set up Cognito for a simple web app. We’ll perform these steps:\nCreate a Cogni1to user pool Add sign-up and sign-in pages Assign IAM roles to authenticated users Access AWS resources from the app This workshop should take you anywhere between 1 to 4 hours to complete.\nWhat you will learn During this workshop you use multiple AWS services including:\nAmazon Cognito Amazon Amplify Amazon API Gateway TOC Getting Started Setting up AWS Cognito Implement sign-up and sign-in page Implement access AWS resources from the app The examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\n"
},
{
	"uri": "//localhost:1313/ee/1_moduleone/11_introduction_cognito.html",
	"title": "Introduction to Cognito",
	"tags": [],
	"description": "",
	"content": "Introduction to Cognito Amazon Cognito lets you easily add user sign-up and authentication to your mobile and web apps. Amazon Cognito also enables you to authenticate users through an external identity provider and provides temporary security credentials to access your app’s backend resources in AWS or any service behind Amazon API Gateway. Amazon Cognito works with external identity providers that support SAML or OpenID Connect, social identity providers (such as Facebook, Apple, Amazon) and you can also integrate your own identity provider.\nImage Source: Jerry Hargrove, awsgeek.com. License\nThe two components that follow make up Amazon Cognito. They operate independently or in tandem, based on your access needs for your users.\nUser pools Image Source: Amazon Docs\nCreate a user pool when you want to authenticate and authorize users to your app or API. User pools are a user directory with both self-service and administrator-driven user creation, management, and authentication. Your user pool can be an independent directory and OIDC identity provider (IdP), and an intermediate service provider (SP) to third-party providers of workforce and customer identities. You can provide single sign-on (SSO) in your app for your organization\u0026rsquo;s workforce identities in SAML 2.0 and OIDC IdPs with user pools. You can also provide SSO in your app for your organization\u0026rsquo;s customer identities in the public OAuth 2.0 identity stores Amazon, Google, Apple and Facebook. For more information about customer identity and access management (CIAM), see What is CIAM?.\nUser pools don’t require integration with an identity pool. From a user pool, you can issue authenticated JSON web tokens (JWTs) directly to an app, a web server, or an API.\nIdentity pools Image Source: Amazon Docs\nSet up an Amazon Cognito identity pool when you want to authorize authenticated or anonymous users to access your AWS resources. An identity pool issues AWS credentials for your app to serve resources to users. You can authenticate users with a trusted identity provider, like a user pool or a SAML 2.0 service. It can also optionally issue credentials for guest users. Identity pools use both role-based and attribute-based access control to manage your users’ authorization to access your AWS resources.\nIdentity pools don’t require integration with a user pool. An identity pool can accept authenticated claims directly from both workforce and consumer identity providers.\n"
},
{
	"uri": "//localhost:1313/ee/3_modulethree/31_partnersetup.html",
	"title": "Partner Setup Instructions",
	"tags": [],
	"description": "",
	"content": "Partner Setup Instructions Submodule One Heading This paragraph block should be an introduction to the submodule.\nSubmodule One Subheading This paragraph block should be utilized to start the submodule. Next Section OR Conclusion Heading This paragraph block can be utilized to lead into the next section of the workshop (which might be a conclusion) or be a conclusion itself.\nExample Guidance Content Below Do you require attendees to sign up for things? Introduction In this section, we are going to discuss tasks and concepts like retrieving access tokens and other configurations within some integration services.\nDocker Hub Docker Hub is a service provided by Docker for finding and sharing container images with your team. It is the world’s largest repository of container images with an array of content sources including container community developers, open source projects and independent software vendors (ISV) building and distributing their code in containers.\nCreate a Docker Hub Access Token The pipeline will package the application into a Docker image. It then pushes that image a public Docker Hub image repository so that it will be available to the deployment segment of the pipeline. To push or upload the newly-built Docker image, the pipeline will need an access token to authorize transaction on your Docker Hub account. You will need to create a new access token (https://docs.docker.com/docker-hub/access-tokens/) and store it for use in later modules. To create your new access tokens:\nLog in to hub.docker.com\rClick your username in the top right corner and select Account Settings\rSelect Security \u0026gt; New Access Token.\rAdd a description for your token that indicates where the token will be used, or that sets a purpose for the token\rCopy the token that appears on the screen and record it in a safe location for use in future modules. Make sure you do this now! Once you close this prompt, Docker will never show the token again and you will have to create a new one\rWarning: Docker Hub credentials and access tokens must be protected and not shared with unauthorized parties to prevent exposure and unauthorized access.\nNow that you have created and safely recorded your new access token, let’s move to the next section and create a new Snyk Access token.\nSnyk Snyk is an open source security platform designed to help software-driven businesses enhance developer security. Snyk’s dependency scanner makes it the only solution that seamlessly and proactively finds, prioritizes, and fixes vulnerabilities and license violations in open source dependencies and container images.\nCreate Snyk Access Token Visit your Snyk account (Account Settings \u0026gt; API Token section) (https://app.snyk.io/account)\rIn the KEY field, select click to show, then select and copy your API token from the field\rPaste the token that appears on the screen in a safe location for use in future modules\rWarning: Your Snyk access token must be protected and not shared with unauthorized parties to prevent exposure and unauthorized access.\nYou can read more about Snyk Access Token from their docs here.\nGreat, you have created and safely stored your newly created Snyk access token, Now, let’s create the Terraform Cloud access token.\nTerraform Cloud Terraform Cloud is an application that helps teams use Terraform together. It manages Terraform runs in a consistent and reliable environment, and includes easy access to shared state and secret data, access controls for approving changes to infrastructure, a private registry for sharing Terraform modules, detailed policy controls for governing the contents of Terraform configurations, and more.\nYou will be using Terraform Cloud to store the Terraform state of the infrastructures your pipeline will provision and deploy using Terraform in future modules.\nCreate Terraform Cloud Access Token Create a `[Terraform Cloud ](https://app.terraform.io/signup/account)` account\rCreate a new '[Terraform Cloud organization ] (https://learn.hashicorp.com/terraform/cloud-getting-started/signup#create-your-organization)'\rCreate a new '[Terraform Cloud workspace ] (https://learn.hashicorp.com/terraform/cloud-getting-started/create-workspace)' named: arm-aws-ecs\rClick the CLI-driven workflow option\rIn the workspace, click arm-aws-ecs \u0026gt; Settings \u0026gt; General then enable '[local execution mode] (https://www.terraform.io/docs/cloud/workspaces/settings.html#execution-mode)'\rGo to the '[User Settings section] (https://www.terraform.io/docs/cloud/users-teams-organizations/users.html#user-settings)' in the Terraform Cloud Dashboard\rIn the User Settings section, Create a new '[Terraform API token] (https://www.terraform.io/docs/cloud/users-teams-organizations/users.html#api-tokens)' then copy and paste the token in a secure location for later use.\rWarning: Your Terraform Cloud API token must be protected and not shared with unauthorized parties to prevent exposure and unauthorized access.\nGreat, you have created and safely stored your newly created Terraform Cloud API Token.\n"
},
{
	"uri": "//localhost:1313/ee/1_moduleone/12_why_use_cognito.html",
	"title": "Why use Cognito",
	"tags": [],
	"description": "",
	"content": "Why use Cognito Integration with Other AWS Services Currently, there are many user management platforms, such as Clerk, Auth0, and others, that offer authentication features. Each of these services has unique advantages compared to AWS Cognito. However, when an application requires access to AWS resources, it’s essential to implement proper authorization and use Developer credentials/SDK to interact with those resources.\nCognito integrates seamlessly with other AWS services like API Gateway, Lambda, S3, and DynamoDB. This allows you to build comprehensive, robust, scalable, serverless applications where authentication and authorization are tightly coupled with your backend services.\nSource Image: Amazon Blog\nBenefits as cloud service "
},
{
	"uri": "//localhost:1313/ee/1_moduleone/13_how_authentication_works.html",
	"title": "How authentication works",
	"tags": [],
	"description": "",
	"content": "How authentication works with Amazon Cognito user pools and identity pools When your customer signs in to an Amazon Cognito user pool, your application receives JSON web tokens (JWTs).\nWhen your customer signs in to an identity pool, either with a user pool token or another provider, your application receives temporary AWS credentials.\nWith user pool sign-in, you can implement authentication and authorization entirely with an AWS SDK. If you don\u0026rsquo;t want to build your own user interface (UI) components, you can invoke a prebuilt web UI (the hosted UI) or the sign-in page for your third-party identity provider (IdP).\n"
},
{
	"uri": "//localhost:1313/ee/3_modulethree.html",
	"title": "Partner Setup",
	"tags": [],
	"description": "",
	"content": "Partner Setup Module Three Heading This paragraph block should be an introduction to the module about requirements the partner may need for their audience members. Examples include signing up for the partner platform or installing an agent.\nModule Three Subheading This paragraph block should be utilized to briefly explain the submodules. Partner Setup Instructions A brief overview of submodule one.\nREMOVE: Every introduction page should include the following warning label.\nThe examples and sample code provided in this workshop are intended to be consumed as instructional content. These will help you understand how various AWS services can be architected to build a solution while demonstrating best practices along the way. These examples are not intended for use in production environments.\nNext Section Heading This paragraph block can optionally be utilized to lead into the next section of the workshop.\n"
},
{
	"uri": "//localhost:1313/ee/4_modulefour.html",
	"title": "Hugo Framework and Markdown",
	"tags": [],
	"description": "",
	"content": "Hugo Framework and Markdown Setting Up The Workshop: AWS Hosted Or Self-paced By utilizing the Hugo language localization settings, directing the workshop towards a specific setup can be simplified. The Language setting in the config.toml file will allow you to distinguish between having one option or both. Commenting out one of the languages will hide all files that are related to that setup. By default, only the self-guided setup will be enabled. To enable switching, set disableLanguageSwitchingButton to false in the config.toml. If you want to have only the Event Engine setup, set the defaultContentLanguage at the top of the config.toml file to ee.\nThe Entry Point Of The Workshop And Naming Conventions All modifications should be done to files in the content folder. _index.md serves as the main entry point to your workshop. Adding modules can be done utilizing the format of #_title as a folder within content. By adding a number value to the title, this helps to keep the files structured in parity with the content of the workshop. A good practice for file naming is to have the folder be the module number and the submodule numbers add to that number reflecting their order. For example, the first module is 1_ModuleOne and the submodules would be 11_SubmoduleOne, 12_SubmoduleTwo, and so forth. To ensure the modules and submodules follow the correct structure order, adjust the \u0026ldquo;weight\u0026rdquo; value in the heading of the file to reflect the order you wish to use. Three module examples are included in this template with the second being split based upon the method of setup. The same rules apply for submodules. _index.md will be the entry point of that module. Submodules should be named with the format of {module number}{weight}_{title}.{language}.md. For example, 11_Foreword.md would be the first submodule of module one in the default language/setup. 31_PartnerSetup.ee.md would be the first submodule of module 3 in the EventEngine language/setup.\nWorking With Hugo Markdown and Shortcode The following links will supply you with all the reference documentation about Hugo markdown. For more experienced developers, inline HTML is also an option to add more customization. For example \u0026lt;p style='text-align: left;'\u0026gt; inline will allow you to adjust your text placement.\nMarkdown and Shortcode Resources The following links are your go-to resource for markdown and shortcode reference in building your workshop: Markdown cheat sheet https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet Learn theme markdown https://learn.netlify.app/en/cont/markdown/ Menu extras and shortcuts https://learn.netlify.app/en/cont/menushortcuts/ Using Font Awesome Emoji\u0026rsquo;s https://learn.netlify.app/en/cont/icons/ to help your page pop Adding Images and Static Media Any images and static media to be included in the workshop need to be placed in the static/images folder. The format to display an image is as follows: ![Alternate Text](/images/imagename.jpg) For example, the markdown for this dog is ![An adorable puppy](/images/dog.jpg) and the image is in the static/images folder. Creating Links The format for creating links is [Link Display Text](http://example.com). For example, this link Hugo Framework was created using [Hugo Framework](https://gohugo.io/about/what-is-hugo/).\nThe \u0026ldquo;More\u0026rdquo; Menu Section This section of the menu on the left is designed to add additional resources that are related to the workshop but not necessarily part of the workshop itself. To modify these links, edit the sections marked [[menu.shortcuts]] in the config.toml located in the root folder. The \u0026ldquo;name\u0026rdquo; portion will be what is displayed in the menu. The \u0026ldquo;url\u0026rdquo; should be the address of the link. The \u0026ldquo;weight\u0026rdquo; setting will adjust the display order, similar to the other \u0026ldquo;weight\u0026rdquo; settings utilized in indexes and modules mentioned previously.\nEnsuring Pages Appear In Both Setup Versions A shortcut to creating the workshop with different setup versions is utilizing the localization functionality of Hugo. By adding a secondary extension to the filename, this file will be included in the specific version of the workshop. Currently, the base utilizes the format *.ee.md to signify that the page is to be used in the AWS EventEngine setup. Much of the time, the files will be the same as the content only differs at specific points. It is necessary to add them, however, to make sure that the common content is duplicated across both versions. If you wish to change the secondary extension or default version, this can be done in the config.toml file in the heading and [Languages] sections.\n"
},
{
	"uri": "//localhost:1313/ee/1_moduleone/14_workshopprerequisites.html",
	"title": "Prerequisites",
	"tags": [],
	"description": "",
	"content": "Prerequisites This lab requires access to the AWS Console with a role that contains full permissions to:\nThe AWS Console Cognito API Gateway You will also require tools such as:\nnodejs Postman https://www.postman.com/ "
},
{
	"uri": "//localhost:1313/ee/categories.html",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/ee/tags.html",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]